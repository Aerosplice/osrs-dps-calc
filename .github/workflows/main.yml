name: Main

on:
  # Push to any branch
  push:
  # PR to main branch
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'yarn'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-
      - name: Install dependencies
        run: yarn
      - name: Build project
        run: yarn build
      - run: mv cdn out/
      - run: zip artifact.zip ./out -r
      - uses: actions/upload-artifact@v4
        # We only need to upload an artifact if this is a push to the main branch
        if: github.ref == 'refs/heads/main'
        with:
          path: artifact.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    # Ensure that we only deploy when pushing to the main branch
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: out/artifact.zip
      - run: unzip artifact.zip -d out
      - name: Deploy to server
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          ARGS: "-rlgoDzvc -i --delete"
          SOURCE: "out/"
          TARGET: "/var/www/html/osrs-dps/"
          SCRIPT_AFTER: |
            whoami
            echo $RSYNC_STDOUT
